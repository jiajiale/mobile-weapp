<style lang="less">
    @import "../../assets/styles/user";
</style>
<template>
    <view>
        <i-tabs current="{{ current }}" color="#ec3a3e" bindchange="handleChangeStatus">
            <i-tab key="ALL" title="全部"></i-tab>
            <i-tab key="UNPAY" title="待付款"></i-tab>
            <i-tab key="UNSEND" title="待发货"></i-tab>
            <i-tab key="UNRECEIVE" title="待收货"></i-tab>
            <i-tab key="FINISH" title="已完成"></i-tab>
        </i-tabs>
    </view>
    <view class="wx-order-list marginT20">
        <view class="marginB20" wx:for="{{orderList}}" wx:key="{{item.id}}" wx:if="{{orderList.length}}">
            <i-card title="{{item.gmt_create}}" full extra="{{item.status_desc}}" i-class="wx-order-card">
                <view slot="content">
                    <repeat for="{{item.goods_list}}" key="{{goodsItem.id}}" item="goodsItem">
                        <OrderItem>
                            <view slot="thumb" style="height: 100%;"><image src="{{goodsImgThumb + '?goods_id=' + goodsItem.goods_id}}" mode="scaleToFill"></image></view>
                            <view slot="title">{{goodsItem.goods_name}}</view>
                            <view slot="tags">
                                <view class="marginT10">
                                    <i-tag type="border">{{goodsItem.spec_key_name}}</i-tag>
                                </view>
                            </view>
                            <view slot="extra">
                                <view style="color: #999;">￥{{goodsItem.goods_price}}</view>
                                <view style="color: #999;">X{{goodsItem.goods_num}}</view>
                            </view>
                        </OrderItem>
                    </repeat>
                </view>
            </i-card>
            <view class="wx-order-append">
                <view class="wx-count">共{{item.goods_list.length}}件商品，实付<span style="color: #ec3a3e;">￥{{item.order_amount}}</span></view>
                <view class="wx-actions" wx:if="{{item.pay_btn === 1 || item.cancel_btn === 1 || item.receive_btn === 1}}">
                    <view class="cancel-btn" wx:if="{{item.cancel_btn === 1}}" data-action="cancel" data-item="{{item}}" @tap="cancelOrder">关闭订单</view>
                    <view class="pay-btn" wx:if="{{item.pay_btn === 1}}" data-action="pay" data-item="{{item}}" @tap="payOrder">去付款</view>
                    <view class="receive-btn" wx:if="{{item.receive_btn === 1}}" data-action="receive" data-item="{{item}}" @tap="receiveOrder">确认收货</view>
                </view>
            </view>
        </view>
        <view wx:if="{{!orderList.length}}">
            <NoInfo emptyText="暂无订单信息" marginTop="200"></NoInfo>
        </view>
    </view>

    <i-modal title="{{confirmTxt}}确认" visible="{{ confirmModal }}" actions="{{ confirmBtn }}" bind:click="handleConfirm">
        <view style="margin-bottom: 20rpx;">确定要{{confirmTxt}}吗？</view>
    </i-modal>
</template>

<script>
    import wepy from 'wepy';
    import OrderItem from '../../components/order-item';
    import LoadMore from '../../components/load-more';
    import NoInfo from '../../components/no-info';
    import authorize from '../../mixins/authorize';
    import pagination from '../../mixins/pagination';
    import api from '../../api';
    import tip from '../../utils/tip';
    import utils from '../../utils/util';
    import MSG from '../../utils/msg';

    export default class UserOrder extends wepy.page {
        config = {
            navigationBarTitleText: '订单',
            usingComponents: {
                "i-tabs": "../../iview/tabs/index",
                "i-tab": "../../iview/tab/index",
                "i-card": "../../iview/card/index",
                "i-tag": "../../iview/tag/index",
                "i-modal": "../../iview/modal/index",
            }
        };
        components = {
            OrderItem: OrderItem,
            NoInfo: NoInfo,
        };

        mixins = [pagination,authorize];

        data = {
            params: [],
            current: 'ALL',
            goodsImgThumb: api.THUMBNAIL_IMG,
            orderList: [],
            order: {},
            action: '',
            page: 1,
            hasPage: true,
            confirmModal: false,
            confirmTxt: '删除',
            confirmBtn: [
                {
                    name: '取消'
                },
                {
                    name: '删除',
                    loading: false
                }
            ],
        };


        methods = {
            handleChangeStatus({ detail }){
                this.current = detail.key;
                this.queryReload();
            },
            cancelOrder(e){
                this.order = e.currentTarget.dataset.item;
                this.action = e.currentTarget.dataset.action;
                this.confirmModal = true;
                this.confirmTxt = '关闭';
                this.confirmBtn[1].name = '关闭';
            },
            payOrder(e){
                this.order = e.currentTarget.dataset.item;
                this.action = e.currentTarget.dataset.action;
                wx.navigateTo({url: '/pages/pay/index?order_id=' + this.order.id})
            },
            receiveOrder(e){
                this.order = e.currentTarget.dataset.item;
                this.action = e.currentTarget.dataset.action;
                this.confirmModal = true;
                this.confirmTxt = '收货';
                this.confirmBtn[1].name = '收货';
            },
            handleConfirm({ detail }){
                if(detail.index === 0){
                    this.confirmModal = false;
                }else{
                    this.confirmBtn[1].loading = true;
                    let _this = this;

                    if(this.action === 'cancel'){
                        api.cancelOrder('POST',{order_id: this.order.id}).then(resp => {
                            this.confirmBtn[1].loading = false;
                            if(resp.code === 200){
                                this.confirmModal = false;
                                tip.success(resp.msg);
                                setTimeout(function () {
                                    _this.queryReload();
                                },500)
                            }else{
                                tip.error(resp.msg)
                            }
                        });
                    }else if(this.action === 'receive'){
                        api.receiveOrder('POST',{order_id: this.order.id}).then(resp => {
                            this.confirmBtn[1].loading = false;
                            if(resp.code === 200){
                                this.confirmModal = false;
                                tip.success(resp.msg);
                                setTimeout(function () {
                                    _this.queryReload();
                                },500)
                            }else{
                                tip.error(resp.msg)
                            }
                        });
                    }
                }
            },
        };

        queryReload(){
            this.page = 1;
            this.orderList = [];
            this.hasPage = true;
            this.queryItemList();
        };

        async queryItemList() {
            tip.loading(MSG.LOADING);
            await api.queryOrderList('POST',{
                page: this.page,
                type: this.current,
                is_goods: 1
            }).then(resp => {
                tip.loaded();
                if(resp.data){
                    resp.data.items.filter(item => {
                        item.gmt_create = utils.formatDateTime(item.gmt_create,'yyyy-MM-dd');
                    });
                    this.orderList = this.orderList.concat(resp.data.items);
                    if(resp.data.pager.index >= resp.data.pager.count){
                        this.hasPage = false;
                    }
                }else{
                    this.orderList = [];
                }
                this.$apply();
            });
        };

        onShow() {
            let _this = this;
            this.checkAuthorize(function () {
                _this.queryReload();
            });
        };

        onLoad(params) {
            this.params = params;

            if(this.params.type){
                this.current = this.params.type.toUpperCase();
            }
        }
    }
</script>
