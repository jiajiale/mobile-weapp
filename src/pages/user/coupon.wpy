<style lang="less">
    @import "../../assets/styles/coupon";
</style>
<template>
    <view>
        <i-tabs current="{{ current }}" color="#ec3a3e" bindchange="handleChangeStatus">
            <i-tab key="UNUSED" title="未使用"></i-tab>
            <i-tab key="USED" title="已使用"></i-tab>
            <i-tab key="EXPIRED" title="已过期"></i-tab>
        </i-tabs>
    </view>
    <view class="wx-coupon-list marginT20">
        <view class="marginB20" wx:for="{{couponList}}" wx:key="{{item.id}}" wx:if="{{couponList.length}}">
            <CouponItem :current.sync="current"></CouponItem>
        </view>
        <view wx:if="{{!couponList.length}}">
            <NoInfo emptyText="暂无订单信息" marginTop="200"></NoInfo>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import LoadMore from '../../components/load-more';
    import NoInfo from '../../components/no-info';
    import CouponItem from '../../components/coupon-item';
    import authorize from '../../mixins/authorize';
    import pagination from '../../mixins/pagination';
    import api from '../../api';
    import tip from '../../utils/tip';
    import utils from '../../utils/util';
    import MSG from '../../utils/msg';

    export default class UserCoupon extends wepy.page {
        config = {
            navigationBarTitleText: '我的优惠券',
            usingComponents: {
                "i-tabs": "../../iview/tabs/index",
                "i-tab": "../../iview/tab/index",
                "i-row": "../../iview/row/index",
                "i-col": "../../iview/col/index"
            }
        };
        components = {
            NoInfo: NoInfo,
            CouponItem: CouponItem,
        };

        mixins = [authorize,pagination];

        data = {
            current: 'UNUSED',
            page: 1,
            hasPage: true,
            couponList: [1,2]
        };

        methods = {
            handleChangeStatus({ detail }){
                this.current = detail.key;
            },
        };

        queryReload(){
            this.page = 1;
            this.pointList = [];
            this.hasPage = true;
            this.queryItemList();
        };

        async queryItemList() {
            tip.loading(MSG.LOADING);
            await api.queryPointList('POST',{page: this.page}).then(resp => {
                tip.loaded();
                if(resp.data){
                    resp.data.items.filter(item => {
                        item.gmt_create = utils.formatDateTime(item.gmt_create,'yyyy-MM-dd');
                    });
                    this.pointList = this.pointList.concat(resp.data.items);
                    if(resp.data.pager.index >= resp.data.pager.count){
                        this.hasPage = false;
                    }
                    this.$apply();
                }
            });
        };

        onShow() {
            let _this = this;
            this.checkAuthorize(function () {
                _this.queryReload();
            });
        };

        onLoad() {

        }
    }
</script>
