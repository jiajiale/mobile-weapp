<style lang="less">
    @import "../../assets/styles/service";
    page{
        background: #F2F2F2;
    }
</style>
<template>
    <view class="wx-navigation" style="background: {{navigationStyle.navBg}};padding:{{navigationStyle.navPadding}}">
        <view class="wx-navigation-icon"><i-icon type="return" size="28" color="{{navigationStyle.navColor}}" @tap="handleBack"/></view>
        <view class="wx-navigation-title" style="color:{{navigationStyle.navColor}}">
            <view style="display: {{navigationStyle.navDisplay}}">业务详情</view>
        </view>
    </view>
    <view class="wx-goods-album">
        <swiper indicator-dots="{{indicatorDots}}" style="height: 760rpx;"
                autoplay="{{autoplay}}" interval="{{interval}}" duration="{{duration}}">
            <block wx:for="{{goodsImages}}" wx:key="{{item.id}}">
                <swiper-item>
                    <image src="{{goodsImgUrl + item.image_url}}" data-item="{{item}}"/>
                </swiper-item>
            </block>
        </swiper>
    </view>
    <view class="wx-goods-info">
        <view class="wx-title">{{goods.goods_name}}</view>
        <view class="wx-sub-title">{{goods.goods_remark}}</view>
        <view class="wx-price">
            <span>￥{{goods.shop_price}}</span>
            <span class="wx-line-price" wx:if="{{goods.market_price}}">￥{{goods.market_price}}</span>
            <view class="wx-share" @tap="handleShare('share')">
                <view><icon class="iconfont icon-fenxiang"/></view>
                <view style="font-size: 24rpx;">分享</view>
            </view>
        </view>
    </view>

    <view class="marginT20 wx-goods-spec">
        <i-cell-group>
            <i-cell title="选择规格：" i-class="wx-spec-item" is-link bind:click="switchGoodsSheet" wx:if="{{goodsSpecLen}}">
                <view slot="footer" style="font-size: 24rpx;color: #999;">{{goods.spec_info}}</view>
            </i-cell>
        </i-cell-group>
    </view>

    <scroll-view class="marginT20 wx-goods-detail">
        <view class="wx-detail-title">业务介绍</view>
        <view class="wx-content">
            <wxparser rich-text="{{goods.goods_content}}" />
        </view>
    </scroll-view>

    <view class="wx-goods-actions">
        <i-row>
            <i-col span="8">
                <i-grid>
                    <i-grid-item i-class="wx-nav-action">
                        <navigator open-type="switchTab" hover-class="none" url="/pages/home/index">
                            <view><icon class="iconfont icon-shouye"/></view>
                            <view>首页</view>
                        </navigator>
                    </i-grid-item>
                </i-grid>
            </i-col>
            <i-col span="16" i-class="{{isSubmit ? 'wx-buy-action wx-disable' : 'wx-buy-action'}}" @tap="handleCheckOrder">
                <view>立即办理</view>
            </i-col>
        </i-row>
    </view>

    <GoodsSheet :visible.sync="goodsVisible" :maxHeight.sync="goodsMaxHeight"
                :bottomStyle.sync="goodsBottomStyle"
                :zIndexStyle.sync="goodsZIndexStyle">
        <view slot="content" wx:if="{{goods.id}}">
            <view style="border-bottom: 1rpx solid #e8e8e8">
                <view class="wx-goods-head-img">
                    <image src="{{goodsImgUrl + goods.original_img}}"
                           mode="scaleToFill"></image>
                </view>
                <view class="wx-goods-head-main">
                    <icon class="iconfont icon-guanbi wx-sheet-close-icon" bindtap="switchGoodsSheet"/>
                    <view class="wx-goods-title">{{goods.goods_name}}</view>
                    <view class="wx-goods-price">
                        <span class="new-price">￥{{goods.shop_price}}</span>
                        <span class="old-price">￥{{goods.market_price}}</span>
                    </view>
                </view>
            </view>
            <view class="wx-goods-specs">
                <i-panel title="{{specIndex}}" wx:for="{{goodsSpecList}}" wx:for-index="specIndex" wx:key="{{index}}">
                    <view class="wx-goods-spec">
                        <view class="wx-goods-spec-item {{item.class}}" wx:for="{{item}}" wx:key="{{item.item_id}}" data-key="{{specIndex}}" data-item="{{item}}" bindtap="selectSpec">{{item.item}}</view>
                    </view>
                </i-panel>
            </view>
            <view style="position: fixed;bottom: 0rpx;width: 100%">
                <i-button type="success" size="small" bindtap="selectGoodsOk">选好了</i-button>
            </view>
        </view>
    </GoodsSheet>

    <i-action-sheet visible="{{ postActionVisible }}" bind:cancel="handleCloseAction">
        <view slot="header" style="padding: 16px">
            <i-row>
                <i-col span="12">
                    <button bindtap="handleShare('wx')" open-type="share" plain style="line-height:30rpx;font-size:12px;border:none;color:#777;">
                        <icon class="iconfont icon-weixin" style="font-size: 30px;margin-top: 5px;"/>
                        <view style="line-height: 50rpx;">好友和微信群</view>
                    </button>
                </i-col>
                <i-col span="12" @tap="handleShare('post')">
                    <icon class="iconfont icon-pengyouquan" style="font-size: 26px;color:#777"/>
                    <view style="line-height: 50rpx;">生成你的专属海报</view>
                </i-col>
            </i-row>
        </view>
    </i-action-sheet>
    <GoodsPost :visible.sync="postVisible" :goods.sync="goods"></GoodsPost>
</template>

<script>
    import wepy from 'wepy';
    import ContentSheet from '../../components/content-sheet';
    import GoodsPost from '../../components/goods-post';
    import authorize from '../../mixins/authorize';
    import api from '../../api';
    import tip from '../../utils/tip';
    import utils from '../../utils/util';
    import MSG from '../../utils/msg';

    export default class ServiceDetail extends wepy.page {
        config = {
            navigationBarTitleText: '业务详情',
            navigationStyle: "custom",
            usingComponents: {
                "wxparser": "plugin://wxparserPlugin/wxparser",
                "i-row": "../../iview/row/index",
                "i-col": "../../iview/col/index",
                "i-grid": "../../iview/grid/index",
                "i-grid-item": "../../iview/grid-item/index",
                "i-grid-icon": "../../iview/grid-icon/index",
                "i-grid-label": "../../iview/grid-label/index",
                "i-cell-group": "../../iview/cell-group/index",
                "i-cell": "../../iview/cell/index",
                "i-input-number": "../../iview/input-number/index",
                "i-button": "../../iview/button/index",
                "i-panel": "../../iview/panel/index",
                "i-icon": "../../iview/icon/index",
                "i-action-sheet": "../../iview/action-sheet/index"
            }
        };
        components = {
            GoodsSheet: ContentSheet,
            GoodsPost: GoodsPost,
        };

        mixins = [authorize];

        data = {
            params: [],
            goodsImgUrl: api.GOODS_IMG_URL,
            goodsIds: [],
            goods: [],
            goodsImages: [],
            goodsSpecList: [],
            goodsSpecLen: 0,
            specInfo: [],
            goodsSpecPrice: [],
            goodsMaxHeight: 900,
            goodsBottomStyle: 0,
            goodsZIndexStyle: 101,
            goodsVisible: false,
            postVisible: false,
            postActionVisible: false,
            isSubmit: false,
            cartList: [],
            navigationStyle: {
                navBg: 'rgba(236,58,62,0)',
                navPadding: '56rpx 0rpx 20rpx',
                navColor: '#666',
                navDisplay: 'none'
            }
        };

        computed = {};

        methods = {
            switchGoodsSheet(){
                this.selectGoodsSpec();
            },
            selectGoodsOk(){
                if(!utils.isEmptyObject(this.goodsSpecList) && this.goods.goods_spec === undefined){
                    tip.toast(MSG.SELECT_SPEC);
                }else{
                    this.goodsVisible = !this.goodsVisible;
                    let specStrArr = [];
                    for(let i in this.specInfo){
                        specStrArr.push(i + ':' + this.specInfo[i]);
                    }
                    this.goods.spec_info = specStrArr.join(',');
                }
            },
            selectSpec(e){
                let item = e.currentTarget.dataset.item;
                let key = e.currentTarget.dataset.key;
                if(this.goods.goods_spec !== undefined){
                    this.goods.goods_spec[key] = item.item_id;
                }else{
                    this.goods.goods_spec = [];
                    this.goods.goods_spec[key] = item.item_id;
                }
                this.specInfo[key] = item.item;

                this.goodsSpecList[key].filter(spec => {
                    if(spec.item_id === item.item_id){
                        spec['class'] = 'active';
                    }else{
                        spec['class'] = '';
                    }
                });

                this.changeGoodsPrice();
            },
            handleCheckOrder(){
                let _this = this;
                this.checkLogin(function () {
                    if(!utils.isEmptyObject(_this.goodsSpecList) && _this.goods.spec_info === undefined){
                        _this.selectGoodsSpec();
                        tip.toast(MSG.SELECT_SPEC);
                        return;
                    }

                    if(!_this.isSubmit) {
                        _this.isSubmit = true;
                        tip.loading(MSG.COMMITTING);
                        api.addGoodsOrder('POST',{
                            goods_id: _this.goods.id,
                            goods_num: _this.goods.goods_num,
                            goods_spec: _this.goods.select_spec
                        }).then(resp => {
                            tip.loaded();
                            _this.isSubmit = false;
                            if(resp.code === 200){
                                wepy.navigateTo({
                                    url: '/pages/check/service?from=goods'
                                })
                            }else{
                                tip.toast(resp.msg);
                            }
                        });
                    }
                });
            },
            handleGo(e){
                let url = e.currentTarget.dataset.url;
                if(url){
                    wepy.navigateTo({url: url});
                }
            },
            handleBack(){
                wepy.navigateTo({
                    url: "/pages/service/index"
                })
            },
            handleShare(name){
                if(name === 'share'){
                    this.postActionVisible = true;
                }else if(name === 'wx'){
                    this.postActionVisible = false;
                }else if(name === 'post'){
                    this.postVisible = true;
                    this.postActionVisible = false;
                }
            },
            handleCloseAction(){
                this.postActionVisible = false;
            }
        };

        events = {
            handleClosePost(){
                this.postVisible = false;
            }
        };

        selectGoodsSpec(){
            this.goodsVisible = !this.goodsVisible;
            this.specInfo = [];
            if(this.goodsVisible){

                if(this.goodsSpecList !== null){
                    this.goods.goods_spec = [];

                    for(let i in this.goodsSpecList){
                        this.goods.goods_spec[i] = this.goodsSpecList[i][0].item_id;
                        this.goodsSpecList[i][0]['class'] = 'active';
                        this.specInfo[i] = this.goodsSpecList[i][0].item;
                    }
                    this.changeGoodsPrice();
                }
            }
        }

        setDefaultGoodsSpec(){
            this.goods.goods_spec = [];
            let specStrArr = [];

            for(let i in this.goodsSpecList){
                this.goods.goods_spec[i] = this.goodsSpecList[i][0].item_id;
                this.goodsSpecList[i][0]['class'] = 'active';
                this.specInfo[i] = this.goodsSpecList[i][0].item;
                specStrArr.push(i + ':' + this.specInfo[i]);
            }

            this.goods.spec_info = specStrArr.join(',');
            this.changeGoodsPrice();
            this.$apply();
        }

        changeGoodsPrice(){
            if(this.goodsSpecPrice !== null){
                let goodsSpecArr = [];

                for(let i in this.goods.goods_spec){
                    goodsSpecArr.push(this.goods.goods_spec[i]);
                }
                let specKey = goodsSpecArr.sort(utils.sortNumber).join('_');  //排序后组合成 key

                this.goods.shop_price = this.goodsSpecPrice[specKey]['price'];
                if(this.goodsSpecPrice[specKey]['market_price']){
                    this.goods.market_price = this.goodsSpecPrice[specKey]['market_price'];
                }else{
                    this.goods.market_price = '';
                }
                this.goods.select_spec = goodsSpecArr;
            }
        }

        async queryItem() {
            tip.loading(MSG.LOADING);
            await api.queryGoodsDetail('POST',{
                goods_id: this.params.id,
            }).then(resp => {
                tip.loaded();
                if(resp.data){
                    this.goods = resp.data.goods;
                    this.goods.goods_num = 1;
                    this.goodsImages = resp.data.goodsImages;
                    this.goodsSpecList = resp.data.goodsSpec;
                    this.goodsSpecLen = Object.keys(this.goodsSpecList).length;
                    this.goodsSpecPrice = resp.data.goodsSpecPrice;
                    //this.setDefaultGoodsSpec();
                    this.$apply();
                }
            });
        };

        onShareAppMessage() {
            let userFrom = this.$parent.globalData.userInfo.uuid;
            return {
                title: this.goods.goods_name,
                path: "/pages/service/detail?id=" + this.goods.id + "&userFrom=" + userFrom,
                imageUrl: this.goodsImgUrl + this.goods.original_img,
            }
        }

        onPageScroll(res) {
            let opacity = res.scrollTop <= 200 ?  res.scrollTop / 200 : 1;
            this.navigationStyle.navBg = 'rgba(236,58,62,'+ opacity +')';
            this.navigationStyle.navColor = res.scrollTop >= 100 ? '#fff' : '#666';
            this.navigationStyle.navDisplay = res.scrollTop >= 100 ? 'block' : 'none';
            this.$apply();
        }

        initData(){
            this.queryItem();
        }

        onShow() {
            let _this = this;
            this.checkAuthorize(function () {
                let result = _this.checkUserFrom(_this.params);

                if(result){
                    _this.checkLogin(function () {
                        _this.saveCustomer();
                        _this.initData();
                    });
                }else{
                    _this.initData();
                }
            });
        };

        onLoad(params) {
            this.params = params;
            if(this.$parent.globalData.isIPX){
                this.navigationStyle.navPadding = '100rpx 0rpx 20rpx';
            }
        }
    }
</script>
