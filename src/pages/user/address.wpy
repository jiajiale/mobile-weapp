<style lang="less">
    page{
        background: #F2F2F2;
    }
    .wx-address-list{
        .wx-address-item{
            background: #fff;
            padding: 10rpx 20rpx;
            border-bottom: 1px solid #e8e8e8;
            .wx-address-content{
                border-bottom: 1px solid #e8e8e8;
                padding-bottom: 10rpx;
                position: relative;
                .wx-address-user{
                    height: 50rpx;
                    line-height: 50rpx;
                }
                .wx-address-info{
                    height: 50rpx;
                    line-height: 50rpx;
                    text-overflow: ellipsis;
                    white-space:nowrap;
                    overflow: hidden;
                }
                .wx-address-close{
                    position: absolute;
                    top: 0rpx;
                    right: 0rpx;
                }
            }
            .wx-address-footer{
                height: 60rpx;
                line-height: 60rpx;
            }
        }
    }
    .wx-address-add{
        position: fixed;
        bottom: 0rpx;
        text-align: center;
        background: #fff;
        width: 100%;
        height: 80rpx;
        line-height: 80rpx;
        box-shadow: 2px 2px 0px 2px rgba(0,0,0,.2);
        border-top: 1px solid #e8e8e8;
        color:#ec3a3e;
    }
    .wx-address-modal{
        .i-modal-body{
            margin-bottom: 0px !important;
        }
        .wx-modal-user{
            padding: 0px !important;
        }
        .address-item{
            border-bottom: 1rpx solid #e8e8e8;
            text-align: left;
        }
    }
</style>
<template>
    <view class="wx-address-list">
        <radio-group class="radio-group" bindchange="handleChangeDefault">
            <view class="wx-address-item marginB20" wx:for="{{addressList}}" wx:key="{{item.id}}">
                <view class="wx-address-content">
                    <view class="wx-address-user">{{item.consignee}}：{{item.mobile}}</view>
                    <view class="wx-address-info">{{item.region}}{{item.address}}</view>
                    <view class="wx-address-close" @tap="handleDelAddress" data-item="{{item}}"><i-icon type="close" /></view>
                </view>
                <view class="wx-address-footer">
                    <i-row>
                        <i-col span="18">
                            <label><radio value="{{item.id}}" color="#ec3a3e" checked="{{item.is_default == '1'}}"/>设为默认地址</label>
                        </i-col>
                        <i-col span="6">
                            <view style="text-align: right;padding-right: 10rpx;color: #999;" bindtap="handleSaveAddress" data-item="{{item}}">编辑</view>
                        </i-col>
                    </i-row>
                </view>
            </view>
        </radio-group>
    </view>

    <i-modal title="{{modalTitle}}" visible="{{visibleModal}}" actions="{{ confirmBtn }}" bind:click="handleSubmit" class="wx-address-modal">
        <view style="display: {{visibleModal ? 'block' : 'none'}}">
            <i-grid>
              <i-grid-item i-class="wx-modal-user"><i-input value="{{ formData.consignee }}" placeholder="姓名" data-key="consignee" bindchange="handleInput"/></i-grid-item>
              <i-grid-item i-class="wx-modal-user"><i-input value="{{ formData.mobile }}" placeholder="手机号" data-key="mobile" bindchange="handleInput"/></i-grid-item>
            </i-grid>
            <i-row>
              <i-col span="24" i-class="address-item">
                <picker
                  mode="multiSelector"
                  bindchange="handlePickerChange"
                  bindcolumnchange="handlePickerColumnChange"
                  value="{{cityIdxArr}}"
                  range-key="name"
                  range="{{cityArr}}"
                >
                  <view style="padding: 25rpx 30rpx;">请选择地址<span style="float: right;">{{ cityStr }}</span></view>
                </picker>
              </i-col>
            </i-row>
            <i-row>
              <i-col span="24" i-class="address-item"><i-input value="{{ formData.address }}" placeholder="输入详细地址" data-key="address" bindchange="handleInput"/></i-col>
            </i-row>
            <i-row>
              <i-col span="24" style="text-align: left;"><i-input value="{{ formData.zipcode }}" placeholder="输入邮政编码" data-key="zipcode" bindchange="handleInput"/></i-col>
            </i-row>
        </view>
    </i-modal>

    <i-modal title="删除确认" visible="{{ confirmModal }}" actions="{{ confirmBtn }}" bind:click="handleConfirm">
        <view style="margin-bottom: 20rpx;">确定要删除吗？</view>
    </i-modal>

    <view class="wx-address-add" bindtap="handleSaveAddress" data-item=""><i-icon type="add" size="20" color="#ec3a3e"/>新增地址</view>
</template>

<script>
    import wepy from 'wepy';
    import authorize from '../../mixins/authorize';
    import api from '../../api';
    import tip from '../../utils/tip';
    import utils from '../../utils/util';
    import MSG from '../../utils/msg';

    export default class UserAddress extends wepy.page {
        config = {
            navigationBarTitleText: '地址',
            usingComponents: {
                "i-icon": "../../iview/icon/index",
                "i-modal": "../../iview/modal/index",
                "i-input": "../../iview/input/index",
                "i-grid": "../../iview/grid/index",
                "i-grid-item": "../../iview/grid-item/index",
                "i-row": "../../iview/row/index",
                "i-col": "../../iview/col/index",
                "i-cell": "../../iview/cell/index"
            }
        };
        components = {
        };

        mixins = [authorize];

        data = {
            params: [],
            isDefault: true,
            visibleModal: false,
            confirmModal: false,
            confirmBtn: [
                {
                    name: '取消'
                },
                {
                    name: '删除',
                    loading: false
                }
            ],
            modalTitle: '新增地址',
            addressList: [],
            cityList: [],
            cityArr: [],
            cityIdxArr: [0,0,0],
            cityStr: '',
            formData: {},
            delItem: {}
        };
        methods = {
            handleInput(e){
                let key = e.currentTarget.dataset.key;
                this.formData[key] = e.detail.detail.value;
            },
            handleChangeDefault({ detail = {} }){
                api.setDefaultAddress('POST',{address_id: detail.value,checked: true}).then(resp => {
                    if(resp.code === 200){
                        tip.success(resp.msg);

                        if(this.params.source && this.params.source === 'check'){
                            wepy.navigateTo({
                                url: '/pages/check/order?from=' + this.params.from
                            })
                        }else{
                            this.queryItemList(false);
                        }
                    }else{
                        tip.error(resp.msg);
                    }
                });
            },
            handleSaveAddress({ currentTarget }){
                let item = currentTarget.dataset.item;

                if(item){
                    this.modalTitle = '修改地址';
                    this.cityStr = item.region;
                    this.formData = item;
                    this.cityIdxArr[0] = utils.findArrIndex(this.cityList,'id',item.province);
                    this.cityIdxArr[1] = utils.findArrIndex(this.cityList[this.cityIdxArr[0]].childrens,'id',item.city);
                    this.cityIdxArr[2] = utils.findArrIndex(this.cityList[this.cityIdxArr[0]].childrens[this.cityIdxArr[1]].childrens,'id',item.district);
                    this.cityArr[0] = this.cityList;
                    this.cityArr[1] = this.cityList[this.cityIdxArr[0]].childrens;
                    this.cityArr[2] = this.cityList[this.cityIdxArr[0]].childrens[this.cityIdxArr[1]].childrens;

                }else{
                    this.modalTitle = '新增地址';
                    this.cityIdxArr = [0,0,0];
                    this.cityStr = '';
                    this.formData = {};
                    this.cityArr = [this.cityList,this.cityList[0].childrens,this.cityList[0].childrens[0].childrens];
                }
                this.confirmBtn[1].name = '提交';
                this.visibleModal = true;
            },
            handleDelAddress(e){
                this.delItem = e.currentTarget.dataset.item;
                this.confirmModal = true;
                this.confirmBtn[1].name = '删除';
            },
            handleSubmit({ detail }){
                if(detail.index === 0){
                    this.visibleModal = false;
                }else{
                    api.saveAddress('POST',this.formData).then(resp => {
                        if(resp.code === 200){
                            tip.success(resp.msg);
                            this.visibleModal = false;
                            if(this.params.source && this.params.source === 'check'){
                                wepy.navigateTo({
                                    url: '/pages/check/order?from=' + this.params.from
                                })
                            }else{
                                this.queryItemList(false);
                            }
                        }else{
                            tip.error(resp.msg);
                        }
                    });
                }
            },
            handleConfirm({ detail }){
                if(detail.index === 0){
                    this.visibleModal = false;
                }else{
                    this.confirmBtn[1].loading = true;
                    let _this = this;
                    api.delAddress('POST',{address_id: this.delItem.id}).then(resp => {
                        this.confirmBtn[1].loading = false;
                        if(resp.code === 200){
                            this.confirmModal = false;
                            tip.success(MSG.DELETE_SUCCESS);
                            setTimeout(function () {
                                _this.queryItemList(false);
                            },500)
                        }else{
                            tip.error(resp.msg)
                        }
                    });
                }
            },
            handlePickerChange(e) {
                let cityIdxArr = e.detail.value;
                let province = this.cityList[cityIdxArr[0]];
                let city = this.cityList[cityIdxArr[0]].childrens[cityIdxArr[1]];
                let district = this.cityList[cityIdxArr[0]].childrens[cityIdxArr[1]].childrens[cityIdxArr[2]];

                this.cityStr = province.name + ',' + city.name + ',' + district.name;
                this.formData.province = province.id;
                this.formData.city = city.id;
                this.formData.district = district.id;
            },
            handlePickerColumnChange(e) {
                let column = e.detail.column;
                let columnIdx = e.detail.value;

                if(column === 0){
                    this.cityIdxArr = [columnIdx,0,0];
                    this.cityArr[1] = this.cityList[columnIdx].childrens;
                    this.cityArr[2] = this.cityList[columnIdx].childrens[0].childrens;
                }else if(column === 1){
                    this.cityIdxArr = [this.cityIdxArr[0],columnIdx,0];
                    this.cityArr[2] = this.cityList[this.cityIdxArr[0]].childrens[columnIdx].childrens;
                }else if(column === 2){
                    this.cityIdxArr = [this.cityIdxArr[0],this.cityIdxArr[1],columnIdx];
                }
            },
        };

        async queryItemList(loading) {
            if(loading) tip.loading(MSG.LOADING);
            await api.queryAddressList('POST',null).then(resp => {
                if(loading) tip.loaded();
                if(resp.data){
                    this.addressList = resp.data.addressList;
                    this.cityList = resp.data.cityList;
                    this.$apply();
                }
            });
        };

        onShow() {
            let _this = this;
            this.checkAuthorize(function () {
                _this.queryItemList(true);
            });
        };

        onLoad(params) {
            this.params = params;
        }
    }
</script>
