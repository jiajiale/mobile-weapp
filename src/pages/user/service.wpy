<style lang="less">
    @import "../../assets/styles/user";
</style>
<template>
    <view>
        <i-tabs current="{{ current }}" color="#ec3a3e" bindchange="handleChangeStatus">
            <i-tab key="ALL" title="全部"></i-tab>
            <i-tab key="UNPAY" title="待付款"></i-tab>
            <i-tab key="UNSEND" title="待办理"></i-tab>
            <i-tab key="FINISH" title="已办理"></i-tab>
        </i-tabs>
    </view>

    <view class="wx-order-list marginT20">
        <view class="marginB20" wx:for="{{orderList}}" wx:key="index" wx:if="{{orderList.length}}">
            <i-card title="{{item.gmt_create}}" full extra="{{item.status_desc}}" i-class="wx-order-card" data-url="/pages/user/detail?id={{item.id}}" bindtap="handleGo">
                <view slot="content">
                    <repeat for="{{item.goods_list}}" key="{{goodsItem.id}}" item="goodsItem">
                        <OrderItem>
                            <view slot="thumb" style="height: 100%;"><image src="{{goodsImgThumb + '?goods_id=' + goodsItem.goods_id}}" mode="scaleToFill"></image></view>
                            <view slot="title">{{goodsItem.goods_name}}</view>
                            <view slot="tags">
                                <view class="marginT10">
                                    <view class="wx-spec">{{goodsItem.spec_key_name}}</view>
                                </view>
                            </view>
                            <view slot="extra">
                                <view style="color: #999;">￥{{goodsItem.goods_price}}</view>
                                <view style="color: #999;">X{{goodsItem.goods_num}}</view>
                            </view>
                        </OrderItem>
                    </repeat>
                </view>
            </i-card>
            <view class="wx-order-append">
                <view class="wx-count">共{{item.goods_list.length}}件商品，实付<span style="color: #ec3a3e;">￥{{item.order_amount}}</span></view>
                <view class="wx-actions" wx:if="{{item.pay_btn === 1 || item.cancel_btn === 1 || item.refund_btn === 1 || item.receive_btn === 1}}">
                    <view class="cancel-btn" wx:if="{{item.cancel_btn === 1}}" data-action="cancel" data-item="{{item}}" @tap="cancelOrder">关闭订单</view>
                    <view class="pay-btn" wx:if="{{item.refund_btn === 1}}" data-action="refund" data-item="{{item}}" @tap="refundOrder">申请退款</view>
                    <view class="pay-btn" wx:if="{{item.pay_btn === 1}}" data-action="pay">
                        <form bindsubmit="handlePay" report-submit="true">
                            <button form-type="submit" plain data-item="{{item}}" style="border:none;padding:0rpx;font-size:24rpx;display:inline-block;color:#fff;height:34rpx;line-height:34rpx;">付款</button>
                        </form>
                    </view>
                </view>
            </view>
        </view>
        <view wx:if="{{!orderList.length}}">
            <NoInfo emptyText="暂无订单信息" marginTop="200"></NoInfo>
        </view>
    </view>

    <i-modal title="{{confirmTxt}}确认" visible="{{ confirmModal }}" actions="{{ confirmBtn }}" bind:click="handleConfirm">
        <view style="margin-bottom: 20rpx;" wx:if="{{action == 'cancel'}}">确定要{{confirmTxt}}吗？</view>
        <view wx:else style="display: {{confirmModal ? 'block' : 'none'}}">
            <i-input type="textarea" bindchange="handleInput" value="{{ note }}" mode="wrapped" i-class="wx-order-note" placeholder="请填写退款原因"/>
        </view>
    </i-modal>
</template>

<script>
    import wepy from 'wepy';
    import OrderItem from '../../components/order-item';
    import LoadMore from '../../components/load-more';
    import NoInfo from '../../components/no-info';
    import authorize from '../../mixins/authorize';
    import pagination from '../../mixins/pagination';
    import api from '../../api';
    import tip from '../../utils/tip';
    import utils from '../../utils/util';
    import MSG from '../../utils/msg';

    export default class UserService extends wepy.page {
        config = {
            navigationBarTitleText: '业务',
            usingComponents: {
                "i-tabs": "../../iview/tabs/index",
                "i-tab": "../../iview/tab/index",
                "i-card": "../../iview/card/index",
                "i-modal": "../../iview/modal/index",
                "i-input": "../../iview/input/index",
            }
        };
        components = {
            OrderItem: OrderItem,
            NoInfo: NoInfo,
        };

        mixins = [pagination,authorize];

        data = {
            goodsImgThumb: api.THUMBNAIL_IMG,
            current: 'ALL',
            goodsImgUrl: api.GOODS_IMG_URL,
            orderList: [],
            goodsOrder: {},
            page: 1,
            hasPage: true,
            note: '',
            action: '',
            confirmModal: false,
            confirmTxt: '删除',
            confirmBtn: [
                {
                    name: '取消'
                },
                {
                    name: '删除',
                    loading: false
                }
            ],
            payCode: 'wx',
            payName: '微信支付'
        };

        methods = {
            handleGo(e){
                let url = e.currentTarget.dataset.url;
                console.log(url);
                this.checkLogin(function () {
                    wepy.navigateTo({url: url});
                });
            },
            handleChangeStatus({ detail }){
                this.current = detail.key;
                this.queryReload();
            },
            handleInput(e){
                this.note = e.detail.detail.value;
            },
            cancelOrder(e){
                this.order = e.currentTarget.dataset.item;
                this.action = e.currentTarget.dataset.action;
                this.confirmModal = true;
                this.confirmTxt = '关闭';
                this.confirmBtn[1].name = '关闭';
            },
            refundOrder(e){
                this.order = e.currentTarget.dataset.item;
                this.action = e.currentTarget.dataset.action;
                this.confirmModal = true;
                this.confirmTxt = '退款';
                this.confirmBtn[1].name = '退款';
            },
            handlePay(e){
                let formId = e.detail.formId;
                this.goodsOrder = e.detail.target.dataset.item;
                this.payOrder(formId);
            },
            handleConfirm({ detail }){
                if(detail.index === 0){
                    this.confirmModal = false;
                }else{
                    const action = [...this.data.confirmBtn];
                    action[1].loading = true;
                    this.setData({
                        confirmBtn: action
                    });
                    let _this = this;

                    if(this.action === 'cancel'){
                        api.cancelOrder('POST',{order_id: this.order.id}).then(resp => {
                            if(resp.code === 200){
                                action[1].loading = false;
                                this.setData({
                                    confirmModal: false,
                                    confirmBtn: action
                                });
                                tip.toast(resp.msg);
                                setTimeout(function () {
                                    _this.queryReload();
                                },500)
                            }else{
                                tip.toast(resp.msg)
                            }
                        });
                    }else if(this.action === 'refund'){
                        api.refundOrder('POST',{order_id: this.order.id,note: this.note}).then(resp => {
                            if(resp.code === 200){
                                action[1].loading = false;
                                this.setData({
                                    confirmModal: false,
                                    confirmBtn: action
                                });
                                tip.toast(resp.msg);
                                setTimeout(function () {
                                    _this.queryReload();
                                },500)
                            }else{
                                tip.toast(resp.msg);
                                action[1].loading = false;
                                this.setData({
                                    confirmBtn: action
                                });
                            }
                        });
                    }
                }
            },
        };

        async payOrder(formId) {
            api.payOrder('POST',{
                order_no: this.goodsOrder.order_sn,
                pay_code: this.payCode,
                pay_name: this.payName,
                form_id : formId
            }).then(result => {
                if(result.data === true){
                    tip.toast('下单成功',5000,function () {
                        wx.navigateTo({
                            url: '/pages/service/index'
                        })
                    },'success')
                }else{
                    wx.requestPayment({
                        'timeStamp': result.data.timeStamp,
                        'nonceStr': result.data.nonceStr,
                        'package': result.data.package,
                        'signType': result.data.signType,
                        'paySign': result.data.paySign,
                        'success':function(res){
                            tip.toast('支付成功',5000,function () {
                                wx.navigateTo({
                                    url: '/pages/service/index'
                                })
                            },'success')
                        },
                        'fail':function(res){
                            tip.error('支付失败');
                        }
                    })
                }

            });
        };

        queryReload(){
            this.page = 1;
            this.orderList = [];
            this.hasPage = true;
            this.queryItemList();
        };

        async queryItemList() {
            tip.loading(MSG.LOADING);
            await api.queryOrderList('POST',{
                page: this.page,
                type: this.current,
                is_goods: 0
            }).then(resp => {
                tip.loaded();
                if(resp.data){
                    resp.data.items.filter(item => {
                        item.gmt_create = utils.formatDateTime(item.gmt_create,'yyyy-MM-dd');
                    });
                    this.orderList = this.orderList.concat(resp.data.items);
                    if(resp.data.pager.index >= resp.data.pager.count){
                        this.hasPage = false;
                    }
                }else{
                    this.orderList = [];
                }
                this.$apply();
            });
        };

        onShow() {
            let _this = this;
            this.checkAuthorize(function () {
                _this.queryReload();
            });
        };

        onLoad() {

        }
    }
</script>
